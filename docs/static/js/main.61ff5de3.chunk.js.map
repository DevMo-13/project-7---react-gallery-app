{"version":3,"sources":["components/SearchForm.js","components/Nav.js","components/Photo.js","components/Loading.js","components/NoResults.js","components/PhotoContainer.js","config.js","components/NotFound.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchForm","handleSubmit","e","preventDefault","searchTopic","topic","value","path","props","resetLoadState","history","push","currentTarget","reset","className","onSubmit","this","type","name","placeholder","ref","input","required","fill","height","viewBox","width","xmlns","d","Component","withRouter","Nav","to","Photo","farmId","serverId","id","secret","title","src","alt","Loading","NoResults","PhotoContainer","performSearch","match","axios","get","params","then","response","stopLoading","setState","data","photos","photo","catch","error","console","log","state","prevProps","loading","length","map","key","farm","server","NotFound","App","exact","render","component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.61ff5de3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n// SearchForm component renders the search input field and button,\r\n// and handles the functionality when a new search topic is submitted.\r\nclass SearchForm extends Component {\r\n    // Resets the load state to true, updates history, and pushes new url based on search topic.  \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let searchTopic = this.topic.value;\r\n        const path = `/search/${searchTopic}`;\r\n\r\n        this.props.resetLoadState();\r\n        this.props.history.push(path);\r\n        e.currentTarget.reset();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"search-form\" onSubmit={this.handleSubmit}>\r\n                <input type=\"search\" \r\n                    name=\"search\"\r\n                    placeholder=\"Search...\" \r\n                    ref={(input) => this.topic = input}\r\n                    required/>\r\n                <button type=\"submit\" className=\"search-button\">\r\n                    <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n                        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                    </svg>\r\n                </button>\r\n            </form>\r\n        );\r\n    };\r\n}\r\n\r\nexport default withRouter(SearchForm);","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n// Nav component renders the links to the deafult search pages.\r\nconst Nav = () => (\r\n    <nav className=\"main-nav\">\r\n        <ul>\r\n            <li><NavLink to=\"/mountains\">Mountains</NavLink></li>\r\n            <li><NavLink to=\"/animals\">Animals</NavLink></li>\r\n            <li><NavLink to=\"/oceans\">Oceans</NavLink></li>\r\n        </ul>\r\n    </nav>\r\n);\r\n\r\nexport default Nav;","import React from 'react';\r\n\r\n// Photo component renders the gallery images.\r\nconst Photo = ({ farmId, serverId, id, secret, title }) => (\r\n    <li>\r\n        <img src={`https://farm${farmId}.staticflickr.com/${serverId}/${id}_${secret}.jpg`} alt={`${title}`}/>\r\n    </li>\r\n);\r\n\r\nexport default Photo;\r\n","import React from 'react';\r\n\r\n// Loading component renders a loading indicator when results are being fecthed from the API.\r\nconst Loading = () => (\r\n    <li className=\"not-found\">\r\n        <h3>Loading...</h3>\r\n    </li>\r\n);\r\n\r\nexport default Loading;","import React from 'react';\r\n\r\n// NoResults component renders a message when the API retrieves no results matching the searched topic.\r\nconst NoResults = () => (\r\n    <li className=\"not-found\">\r\n        <h3>No Results Found</h3>\r\n        <p>Your search did not return any results - please try again.</p>\r\n    </li>\r\n);\r\n\r\nexport default NoResults;","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport apiKey from '../config';\r\nimport Photo from './Photo';\r\nimport Loading from './Loading'\r\nimport NoResults from './NoResults';\r\n\r\n// PhotoContainer component fetches the data from the API,\r\n// and renders the gallery components based off of the results.\r\nclass PhotoContainer extends Component {  \r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            topic: '',\r\n            data: [],\r\n        };\r\n    }; \r\n\r\n    // Calls on the performSearch method when the component is mounted.\r\n    componentDidMount() {\r\n        this.performSearch();\r\n    };\r\n\r\n    // Calls on performSearch again if a new topic is searched or the route is changed.\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.match.params.topic !== prevProps.match.params.topic) {\r\n            this.performSearch();\r\n        };\r\n    };\r\n\r\n    // Fetches the data from the API and updates state based off of the results.\r\n    performSearch = () => {\r\n        const { match } = this.props;\r\n\r\n        axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${match.params.topic}&content_type=1&is_getty=true&per_page=24&page=1&format=json&nojsoncallback=1`)\r\n        .then(response => {\r\n            this.props.stopLoading();\r\n            this.setState({\r\n                topic: match.params.topic,\r\n                data: response.data.photos.photo,\r\n            });\r\n        })\r\n        .catch(error => {\r\n            console.log('Error fetching and parsing data', error);\r\n        });\r\n    };\r\n    \r\n    render() {  \r\n        const { topic, data } = this.state;\r\n        const { loading } = this.props;\r\n        let photos;\r\n\r\n        // Renders different components depending on loading state and data from API results.\r\n        if(loading) {\r\n            photos = <Loading />\r\n        } else if (data.length > 0) {\r\n            photos = data.map(photo => <Photo key={photo.id} farmId={photo.farm} serverId={photo.server} id={photo.id} secret={photo.secret} title={photo.title} />)\r\n        } else {\r\n            photos = <NoResults />\r\n        };\r\n\r\n        return(\r\n            <div className=\"photo-container\">\r\n                {(loading) ? null : <h2>{topic}</h2>} \r\n                <ul>\r\n                    {photos}\r\n                </ul>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nexport default withRouter(PhotoContainer);\r\n","const apiKey = '5949fa05bc7b60732707f84c983476fe';\r\n\r\nexport default apiKey;","import React from 'react';\r\n\r\n// NotFound component renders a 404-like error for when the path does not match an existing route.\r\nconst NotFound = () => (\r\n    <div className=\"not-found\">\r\n        <h3>Page Not Found</h3>\r\n        <p>Sorry, this page does not exist.</p>\r\n    </div>\r\n);\r\n\r\nexport default NotFound;","/******************************************\r\nTreehouse Techdegree:\r\nFSJS project 7 - React Gallery App\r\n--aiming for exceeds expectations--\r\n******************************************/\r\n\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport SearchForm from './SearchForm';\r\nimport Nav from './Nav';\r\nimport PhotoContainer from './PhotoContainer';\r\nimport NotFound from './NotFound';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            loading: true\r\n        };\r\n    };\r\n\r\n    // Changes the loading state to false once the search is complete.\r\n    stopLoading = () => {\r\n        this.setState({\r\n            loading: false\r\n        });\r\n    };\r\n\r\n    // Changes the loading state back to true when a new search is submitted.\r\n    resetLoadState = () => {\r\n        this.setState({\r\n            loading: true\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n            <div className=\"container\">\r\n                <SearchForm resetLoadState={this.resetLoadState} />\r\n                <Nav />\r\n                <Switch>\r\n                    <Route exact path=\"/\" render={() => <Redirect to=\"/mountains\" />} />   \r\n\t\t\t\t\t<Route exact path=\"/react-gallery-app\" render={() => <Redirect to=\"/mountains\" />} />   \r\n                    <Route exact path=\"/search/:topic\" render={() => <PhotoContainer loading={this.state.loading} stopLoading={this.stopLoading} />} />\r\n                    <Route exact path=\"/:topic\" render={() => <PhotoContainer loading={this.state.loading} stopLoading={this.stopLoading} />} />\r\n                    <Route component={NotFound} />\r\n                </Switch>\r\n            </div>\r\n            </BrowserRouter>\r\n        );\r\n    };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './components/App';\r\nimport './css/index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}